addr-adl = nstring
addr-host = nstring
addr-mailbox = nstring
addr-name = nstring
address = "(" addr-name SP addr-adl SP addr-mailbox SP addr-host ")"
astring = 1*ASTRING-CHAR / string
ASTRING-CHAR = ATOM-CHAR / resp-specials
atom = 1*ATOM-CHAR
ATOM-CHAR = <any CHAR except atom-specials>
auth-type = atom
body = "(" (body-type-1part / body-type-mpart) ")"
body-ext-1part = body-fld-md5 [SP body-fld-dsp [SP body-fld-lang [SP body-fld-loc *(SP body-extension)]]]
body-ext-mpart = body-fld-param [SP body-fld-dsp [SP body-fld-lang [SP body-fld-loc *(SP body-extension)]]]
body-extension = nstring / number / "(" body-extension *(SP body-extension) ")"
body-fields = body-fld-param SP body-fld-id SP body-fld-desc SP body-fld-enc SP body-fld-octets
body-fld-desc = nstring
body-fld-dsp = "(" string SP body-fld-param ")" / nil
body-fld-enc = (DQUOTE ("7BIT" / "8BIT" / "BINARY" / "BASE64" / "QUOTED-PRINTABLE") DQUOTE) / string
body-fld-id = nstring
body-fld-lang = nstring / "(" string *(SP string) ")"
body-fld-lines = number
body-fld-loc = nstring
body-fld-md5 = nstring
body-fld-octets = number
body-fld-param = "(" string SP string *(SP string SP string) ")" / nil
body-type-1part = (body-type-basic / body-type-msg / body-type-text) [SP body-ext-1part]
body-type-basic = media-basic SP body-fields
body-type-mpart = 1*body SP media-subtype [SP body-ext-mpart]
body-type-msg = media-message SP body-fields SP envelope SP body SP body-fld-lines
body-type-text = media-text SP body-fields SP body-fld-lines
capability = ("AUTH=" auth-type) / atom
capability-data = "CAPABILITY" *(SP capability) SP "IMAP4rev1" *(SP capability)
CHAR8 = %x1-ff
date = date-text / DQUOTE date-text DQUOTE
date-day = 1*2DIGIT
date-day-fixed = (SP DIGIT) / 2DIGIT
date-month = "Jan" / "Feb" / "Mar" / "Apr" / "May" / "Jun" / "Jul" / "Aug" / "Sep" / "Oct" / "Nov" / "Dec"
date-text = date-day "-" date-month "-" date-year
date-time = DQUOTE date-day-fixed "-" date-month "-" date-year SP time SP zone DQUOTE
date-year = 4DIGIT
digit-nz = %x31-39
env-bcc = "(" 1*address ")" / nil
env-cc = "(" 1*address ")" / nil
env-date = nstring
env-from = "(" 1*address ")" / nil
env-in-reply-to = nstring
env-message-id = nstring
env-reply-to = "(" 1*address ")" / nil
env-sender = "(" 1*address ")" / nil
env-subject = nstring
env-to = "(" 1*address ")" / nil
envelope = "(" env-date SP env-subject SP env-from SP env-sender SP env-reply-to SP env-to SP env-cc SP env-bcc SP env-in-reply-to SP env-message-id ")"
fetch-att = "ENVELOPE" / "FLAGS" / "INTERNALDATE" / "RFC822" [".HEADER" / ".SIZE" / ".TEXT"] / "BODY" ["STRUCTURE"] / "UID" / "BODY" section ["<" number "." nz-number ">"] / "BODY.PEEK" section ["<" number "." nz-number ">"]
flag = "\Answered" / "\Flagged" / "\Deleted" / "\Seen" / "\Draft" / flag-keyword / flag-extension
flag-extension = "\" atom
flag-fetch = flag / "\Recent"
flag-keyword = atom
flag-list = "(" [flag *(SP flag)] ")"
flag-perm = flag / "\*"
header-fld-name = astring
header-list = "(" header-fld-name *(SP header-fld-name) ")"
literal = "{" number "}" CRLF *CHAR8
mailbox = "INBOX" / astring
mailbox-data = "FLAGS" SP flag-list / "LIST" SP mailbox-list / "LSUB" SP mailbox-list / "SEARCH" *(SP nz-number) / "STATUS" SP mailbox SP "(" [rfc3501-STATUS-ATT-LIST] ")" / number SP "EXISTS" / number SP "RECENT" / Namespace-Response / esearch-response
mailbox-list = "(" [mbx-list-flags] ")" SP (DQUOTE QUOTED-CHAR DQUOTE / nil) SP mailbox
mbx-list-flags = *(mbx-list-oflag SP) mbx-list-sflag *(SP mbx-list-oflag) / mbx-list-oflag *(SP mbx-list-oflag)
mbx-list-oflag = "\Noinferiors" / flag-extension
mbx-list-sflag = "\Noselect" / "\Marked" / "\Unmarked"
media-basic = ((DQUOTE ("APPLICATION" / "AUDIO" / "IMAGE" / "MESSAGE" / "VIDEO") DQUOTE) / string) SP media-subtype
media-message = DQUOTE "MESSAGE" DQUOTE SP DQUOTE "RFC822" DQUOTE
media-subtype = string
media-text = DQUOTE "TEXT" DQUOTE SP media-subtype
message-data = nz-number SP ("EXPUNGE" / ("FETCH" SP msg-att))
msg-att = "(" (msg-att-dynamic / msg-att-static) *(SP (msg-att-dynamic / msg-att-static)) ")"
msg-att-dynamic = "FLAGS" SP "(" [flag-fetch *(SP flag-fetch)] ")"
msg-att-static = "ENVELOPE" SP envelope / "INTERNALDATE" SP date-time / "RFC822" [".HEADER" / ".TEXT"] SP nstring / "RFC822.SIZE" SP number / "BODY" ["STRUCTURE"] SP body / "BODY" section ["<" number ">"] SP nstring / "UID" SP uniqueid
nil = "NIL"
nstring = string / nil
number = 1*DIGIT
nz-number = digit-nz *DIGIT
quoted = DQUOTE *QUOTED-CHAR DQUOTE
QUOTED-CHAR = <any TEXT-CHAR except quoted-specials> / "\" quoted-specials
quoted-specials = DQUOTE / "\"
resp-cond-bye = "BYE" SP resp-text
resp-cond-state = ("OK" / "NO" / "BAD") SP resp-text
resp-specials = "]"
resp-text = ["[" resp-text-code "]" SP] text
resp-text-code = "ALERT" / "BADCHARSET" [SP "(" astring *(SP astring) ")"] / capability-data / "PARSE" / "PERMANENTFLAGS" SP "(" [flag-perm *(SP flag-perm)] ")" / "READ-ONLY" / "READ-WRITE" / "TRYCREATE" / "UIDNEXT" SP nz-number / "UIDVALIDITY" SP nz-number / "UNSEEN" SP nz-number / atom [SP 1*<any TEXT-CHAR except "]">]
search-key = "ALL" / "ANSWERED" / "BCC" SP astring / "BEFORE" SP date / "BODY" SP astring / "CC" SP astring / "DELETED" / "FLAGGED" / "FROM" SP astring / "KEYWORD" SP flag-keyword / "NEW" / "OLD" / "ON" SP date / "RECENT" / "SEEN" / "SINCE" SP date / "SUBJECT" SP astring / "TEXT" SP astring / "TO" SP astring / "UNANSWERED" / "UNDELETED" / "UNFLAGGED" / "UNKEYWORD" SP flag-keyword / "UNSEEN" / "DRAFT" / "HEADER" SP header-fld-name SP astring / "LARGER" SP number / "NOT" SP search-key / "OR" SP search-key SP search-key / "SENTBEFORE" SP date / "SENTON" SP date / "SENTSINCE" SP date / "SMALLER" SP number / "UID" SP sequence-set / "UNDRAFT" / sequence-set / "(" search-key *(SP search-key) ")"
section = "[" [section-spec] "]"
section-msgtext = "HEADER" / "HEADER.FIELDS" [".NOT"] SP header-list / "TEXT"
section-part = nz-number *("." nz-number)
section-spec = section-msgtext / (section-part ["." section-text])
section-text = section-msgtext / "MIME"
seq-number = nz-number / "*"
seq-range = seq-number ":" seq-number
sequence-set = (seq-number / seq-range) *("," sequence-set)
status-att = "MESSAGES" / "RECENT" / "UIDNEXT" / "UIDVALIDITY" / "UNSEEN"
store-att-flags = (["+" / "-"] "FLAGS" [".SILENT"]) SP (flag-list / (flag *(SP flag)))
string = quoted / literal
text = 1*TEXT-CHAR
TEXT-CHAR = <any CHAR except CR and LF>
time = 2DIGIT ":" 2DIGIT ":" 2DIGIT
uniqueid = nz-number
zone = ("+" / "-") 4DIGIT
rfc3501-STATUS-ATT-LIST = status-att SP number *(SP status-att SP number)
append = "APPEND" SP mailbox 1*append-message
append-data = literal / literal8 / append-data-ext
append-data-ext = tagged-ext
append-ext = append-ext-name SP append-ext-value
append-ext-name = tagged-ext-label
append-ext-value = tagged-ext-val
append-message = append-opts SP append-data
append-opts = [SP flag-list] [SP date-time] *(SP append-ext)
charset = atom / quoted
create = "CREATE" SP mailbox [create-params]
create-param = create-param-name [SP create-param-value]
create-param-name = tagged-ext-label
create-param-value = tagged-ext-val
create-params = SP "(" create-param *(SP create-param) ")"
esearch-response = "ESEARCH" [search-correlator] [SP "UID"] *(SP search-return-data)
examine = "EXAMINE" SP mailbox [select-params]
fetch = "FETCH" SP sequence-set SP ("ALL" / "FULL" / "FAST" / fetch-att / "(" fetch-att *(SP fetch-att) ")") [fetch-modifiers]
fetch-modif-params = tagged-ext-val
fetch-modifier = fetch-modifier-name [SP fetch-modif-params]
fetch-modifier-name = tagged-ext-label
fetch-modifiers = SP "(" fetch-modifier *(SP fetch-modifier) ")"
literal8 = "~{" number ["+"] "}" CRLF *OCTET
Namespace = nil / "(" 1*Namespace-Descr ")"
Namespace-Command = "NAMESPACE"
Namespace-Descr = "(" string SP (DQUOTE QUOTED-CHAR DQUOTE / nil) *(Namespace-Response-Extension) ")"
Namespace-Response = "NAMESPACE" SP Namespace SP Namespace SP Namespace
Namespace-Response-Extension = SP string SP "(" string *(SP string) ")"
rename = "RENAME" SP mailbox SP mailbox [rename-params]
rename-param = rename-param-name [SP rename-param-value]
rename-param-name = tagged-ext-label
rename-param-value = tagged-ext-val
rename-params = SP "(" rename-param *(SP rename-param) ")"
response-data = "*" SP response-payload CRLF
response-payload = resp-cond-state / resp-cond-bye / mailbox-data / message-data / capability-data
search = "SEARCH" [search-return-opts] SP search-program
search-correlator = SP "(" "TAG" SP tag-string ")"
search-mod-params = tagged-ext-val
search-modifier-name = tagged-ext-label
search-program = ["CHARSET" SP charset SP] search-key *(SP search-key)
search-return-data = search-modifier-name SP search-return-value
search-return-opt = search-modifier-name [SP search-mod-params]
search-return-opts = SP "RETURN" SP "(" [search-return-opt *(SP search-return-opt)] ")"
search-return-value = tagged-ext-val
select = "SELECT" SP mailbox [select-params]
select-param = select-param-name [SP select-param-value]
select-param-name = tagged-ext-label
select-param-value = tagged-ext-val
select-params = SP "(" select-param *(SP select-param) ")"
status-att-list = status-att-val *(SP status-att-val)
status-att-val = ("MESSAGES" SP number) / ("RECENT" SP number) / ("UIDNEXT" SP nz-number) / ("UIDVALIDITY" SP nz-number) / ("UNSEEN" SP number)
store = "STORE" SP sequence-set [store-modifiers] SP store-att-flags
store-modif-params = tagged-ext-val
store-modifier = store-modifier-name [SP store-modif-params]
store-modifier-name = tagged-ext-label
store-modifiers = SP "(" store-modifier *(SP store-modifier) ")"
tag-string = string
tagged-ext = tagged-ext-label SP tagged-ext-val
tagged-ext-comp = astring / tagged-ext-comp *(SP tagged-ext-comp) / "(" tagged-ext-comp ")"
tagged-ext-label = tagged-label-fchar *tagged-label-char
tagged-ext-simple = sequence-set / number
tagged-ext-val = tagged-ext-simple / "(" [tagged-ext-comp] ")"
tagged-label-char = tagged-label-fchar / DIGIT / ":"
tagged-label-fchar = ALPHA / "-" / "_" / "."