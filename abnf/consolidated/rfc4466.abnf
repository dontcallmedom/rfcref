date-time = DQUOTE date-day-fixed "-" date-month "-" date-year SP time SP zone DQUOTE
fetch-att = "ENVELOPE" / "FLAGS" / "INTERNALDATE" / "RFC822" [".HEADER" / ".SIZE" / ".TEXT"] / "BODY" ["STRUCTURE"] / "UID" / "BODY" section ["<" number "." nz-number ">"] / "BODY.PEEK" section ["<" number "." nz-number ">"]
resp-cond-state = ("OK" / "NO" / "BAD") SP resp-text
resp-cond-bye = "BYE" SP resp-text
message-data = nz-number SP ("EXPUNGE" / ("FETCH" SP msg-att))
capability-data = "CAPABILITY" *(SP capability) SP "IMAP4rev1" *(SP capability)
search-key = "ALL" / "ANSWERED" / "BCC" SP astring / "BEFORE" SP date / "BODY" SP astring / "CC" SP astring / "DELETED" / "FLAGGED" / "FROM" SP astring / "KEYWORD" SP flag-keyword / "NEW" / "OLD" / "ON" SP date / "RECENT" / "SEEN" / "SINCE" SP date / "SUBJECT" SP astring / "TEXT" SP astring / "TO" SP astring / "UNANSWERED" / "UNDELETED" / "UNFLAGGED" / "UNKEYWORD" SP flag-keyword / "UNSEEN" / "DRAFT" / "HEADER" SP header-fld-name SP astring / "LARGER" SP number / "NOT" SP search-key / "OR" SP search-key SP search-key / "SENTBEFORE" SP date / "SENTON" SP date / "SENTSINCE" SP date / "SMALLER" SP number / "UID" SP sequence-set / "UNDRAFT" / sequence-set / "(" search-key *(SP search-key) ")"
sequence-set = (seq-number / seq-range) *("," sequence-set)
store-att-flags = (["+" / "-"] "FLAGS" [".SILENT"]) SP (flag-list / (flag *(SP flag)))
mailbox-data = "FLAGS" SP flag-list / "LIST" SP mailbox-list / "LSUB" SP mailbox-list / "SEARCH" *(SP nz-number) / "STATUS" SP mailbox SP "(" [rfc3501-STATUS-ATT-LIST] ")" / number SP "EXISTS" / number SP "RECENT"
date-day-fixed = (SP DIGIT) / 2DIGIT
date-month = "Jan" / "Feb" / "Mar" / "Apr" / "May" / "Jun" / "Jul" / "Aug" / "Sep" / "Oct" / "Nov" / "Dec"
date-year = 4DIGIT
time = 2DIGIT ":" 2DIGIT ":" 2DIGIT
zone = ("+" / "-") 4DIGIT
section = "[" [section-spec] "]"
number = 1*DIGIT
nz-number = digit-nz *DIGIT
resp-text = ["[" resp-text-code "]" SP] text
msg-att = "(" (msg-att-dynamic / msg-att-static) *(SP (msg-att-dynamic / msg-att-static)) ")"
capability = ("AUTH=" auth-type) / atom
astring = 1*ASTRING-CHAR / string
date = date-text / DQUOTE date-text DQUOTE
flag-keyword = atom
header-fld-name = astring
seq-number = nz-number / "*"
seq-range = seq-number ":" seq-number
flag-list = "(" [flag *(SP flag)] ")"
flag = "\Answered" / "\Flagged" / "\Deleted" / "\Seen" / "\Draft" / flag-keyword / flag-extension
mailbox-list = "(" [mbx-list-flags] ")" SP (DQUOTE QUOTED-CHAR DQUOTE / nil) SP mailbox
mailbox = "INBOX" / astring
rfc3501-STATUS-ATT-LIST = status-att SP number *(SP status-att SP number)
section-spec = section-msgtext / (section-part ["." section-text])
digit-nz = %x31-39
resp-text-code = "ALERT" / "BADCHARSET" [SP "(" astring *(SP astring) ")"] / capability-data / "PARSE" / "PERMANENTFLAGS" SP "(" [flag-perm *(SP flag-perm)] ")" / "READ-ONLY" / "READ-WRITE" / "TRYCREATE" / "UIDNEXT" SP nz-number / "UIDVALIDITY" SP nz-number / "UNSEEN" SP nz-number / atom [SP 1*<any TEXT-CHAR except "]">]
text = 1*TEXT-CHAR
msg-att-dynamic = "FLAGS" SP "(" [flag-fetch *(SP flag-fetch)] ")"
msg-att-static = "ENVELOPE" SP envelope / "INTERNALDATE" SP date-time / "RFC822" [".HEADER" / ".TEXT"] SP nstring / "RFC822.SIZE" SP number / "BODY" ["STRUCTURE"] SP body / "BODY" section ["<" number ">"] SP nstring / "UID" SP uniqueid
auth-type = atom
atom = 1*ATOM-CHAR
ASTRING-CHAR = ATOM-CHAR / resp-specials
string = quoted / literal
date-text = date-day "-" date-month "-" date-year
flag-extension = "\" atom
mbx-list-flags = *(mbx-list-oflag SP) mbx-list-sflag *(SP mbx-list-oflag) / mbx-list-oflag *(SP mbx-list-oflag)
QUOTED-CHAR = <any TEXT-CHAR except quoted-specials> / "\" quoted-specials
nil = "NIL"
status-att = "MESSAGES" / "RECENT" / "UIDNEXT" / "UIDVALIDITY" / "UNSEEN"
section-msgtext = "HEADER" / "HEADER.FIELDS" [".NOT"] SP header-list / "TEXT"
section-part = nz-number *("." nz-number)
section-text = section-msgtext / "MIME"
flag-perm = flag / "\*"
TEXT-CHAR = <any CHAR except CR and LF>
flag-fetch = flag / "\Recent"
envelope = "(" env-date SP env-subject SP env-from SP env-sender SP env-reply-to SP env-to SP env-cc SP env-bcc SP env-in-reply-to SP env-message-id ")"
nstring = string / nil
body = "(" (body-type-1part / body-type-mpart) ")"
uniqueid = nz-number
ATOM-CHAR = <any CHAR except atom-specials>
resp-specials = "]"
quoted = DQUOTE *QUOTED-CHAR DQUOTE
literal = "{" number "}" CRLF *CHAR8
date-day = 1*2DIGIT
mbx-list-oflag = "\Noinferiors" / flag-extension
mbx-list-sflag = "\Noselect" / "\Marked" / "\Unmarked"
quoted-specials = DQUOTE / "\"
header-list = "(" header-fld-name *(SP header-fld-name) ")"
env-date = nstring
env-subject = nstring
env-from = "(" 1*address ")" / nil
env-sender = "(" 1*address ")" / nil
env-reply-to = "(" 1*address ")" / nil
env-to = "(" 1*address ")" / nil
env-cc = "(" 1*address ")" / nil
env-bcc = "(" 1*address ")" / nil
env-in-reply-to = nstring
env-message-id = nstring
body-type-1part = (body-type-basic / body-type-msg / body-type-text) [SP body-ext-1part]
body-type-mpart = 1*body SP media-subtype [SP body-ext-mpart]
CHAR8 = %x1-ff
address = "(" addr-name SP addr-adl SP addr-mailbox SP addr-host ")"
body-type-basic = media-basic SP body-fields
body-type-msg = media-message SP body-fields SP envelope SP body SP body-fld-lines
body-type-text = media-text SP body-fields SP body-fld-lines
body-ext-1part = body-fld-md5 [SP body-fld-dsp [SP body-fld-lang [SP body-fld-loc *(SP body-extension)]]]
media-subtype = string
body-ext-mpart = body-fld-param [SP body-fld-dsp [SP body-fld-lang [SP body-fld-loc *(SP body-extension)]]]
addr-name = nstring
addr-adl = nstring
addr-mailbox = nstring
addr-host = nstring
media-basic = ((DQUOTE ("APPLICATION" / "AUDIO" / "IMAGE" / "MESSAGE" / "VIDEO") DQUOTE) / string) SP media-subtype
body-fields = body-fld-param SP body-fld-id SP body-fld-desc SP body-fld-enc SP body-fld-octets
media-message = DQUOTE "MESSAGE" DQUOTE SP DQUOTE "RFC822" DQUOTE
body-fld-lines = number
media-text = DQUOTE "TEXT" DQUOTE SP media-subtype
body-fld-md5 = nstring
body-fld-dsp = "(" string SP body-fld-param ")" / nil
body-fld-lang = nstring / "(" string *(SP string) ")"
body-fld-loc = nstring
body-extension = nstring / number / "(" body-extension *(SP body-extension) ")"
body-fld-param = "(" string SP string *(SP string SP string) ")" / nil
body-fld-id = nstring
body-fld-desc = nstring
body-fld-enc = (DQUOTE ("7BIT" / "8BIT" / "BINARY" / "BASE64" / "QUOTED-PRINTABLE") DQUOTE) / string
body-fld-octets = number
; Extracted from IETF RFC 4466
; Copyright (c) IETF Trust and the persons identified as authors of the code. All rights reserved.
; Redistribution and use in source and binary forms, with or without modification, is permitted pursuant to, and subject to the license terms contained in, the Revised BSD License set forth in Section 4.c of the IETF Trust's Legal Provisions Relating to IETF Documents (https://trustee.ietf.org/license-info).

append          = "APPEND" SP mailbox 1*append-message
                     ;; only a single append-message may appear
                     ;; if MULTIAPPEND [MULTIAPPEND] capability
                     ;; is not present

append-message  = append-opts SP append-data

append-ext      = append-ext-name SP append-ext-value
                     ;; This non-terminal define extensions to
                     ;; to message metadata.

append-ext-name = tagged-ext-label

append-ext-value= tagged-ext-val
                     ;; This non-terminal shows recommended syntax
                     ;; for future extensions.


append-data     = literal / literal8 / append-data-ext

append-data-ext = tagged-ext
                     ;; This non-terminal shows recommended syntax
                     ;; for future extensions,
                     ;; i.e., a mandatory label followed
                     ;; by parameters.

append-opts     = [SP flag-list] [SP date-time] *(SP append-ext)
                     ;; message metadata

charset         = atom / quoted
                     ;; Exact syntax is defined in [CHARSET].

create          = "CREATE" SP mailbox
                     [create-params]
                     ;; Use of INBOX gives a NO error.
create-params   = SP "(" create-param *( SP create-param) ")"

create-param-name = tagged-ext-label

create-param      = create-param-name [SP create-param-value]

create-param-value= tagged-ext-val
                     ;; This non-terminal shows recommended syntax
                     ;; for future extensions.


esearch-response  = "ESEARCH" [search-correlator] [SP "UID"]
                        *(SP search-return-data)
                      ;; Note that SEARCH and ESEARCH responses
                      ;; SHOULD be mutually exclusive,
                      ;; i.e., only one of the response types
                      ;; should be
                      ;; returned as a result of a command.


examine         = "EXAMINE" SP mailbox [select-params]
                     ;; modifies the original IMAP EXAMINE command
                     ;; to accept optional parameters

fetch           = "FETCH" SP sequence-set SP ("ALL" / "FULL" /
                     "FAST" / fetch-att /
                     "(" fetch-att *(SP fetch-att) ")")
                     [fetch-modifiers]
                     ;; modifies the original IMAP4 FETCH command to
                     ;; accept optional modifiers

fetch-modifiers = SP "(" fetch-modifier *(SP fetch-modifier) ")"

fetch-modifier  = fetch-modifier-name [ SP fetch-modif-params ]

fetch-modif-params  = tagged-ext-val
                     ;; This non-terminal shows recommended syntax
                     ;; for future extensions.

fetch-modifier-name = tagged-ext-label

literal8        = "~{" number ["+"] "}" CRLF *OCTET
                      ;; A string that might contain NULs.
                      ;; <number> represents the number of OCTETs
                      ;; in the response string.
                      ;; The "+" is only allowed when both LITERAL+ and
                      ;; BINARY extensions are supported by the server.
mailbox-data      =/ Namespace-Response /
                        esearch-response

Namespace         = nil / "(" 1*Namespace-Descr ")"

Namespace-Command = "NAMESPACE"

Namespace-Descr   = "(" string SP
                          (DQUOTE QUOTED-CHAR DQUOTE / nil)
                           *(Namespace-Response-Extension) ")"

Namespace-Response-Extension = SP string SP
                     "(" string *(SP string) ")"

Namespace-Response = "NAMESPACE" SP Namespace
                        SP Namespace SP Namespace
         ;; This response is currently only allowed
         ;; if the IMAP server supports [NAMESPACE].
         ;; The first Namespace is the Personal Namespace(s)
         ;; The second Namespace is the Other Users' Namespace(s)
         ;; The third Namespace is the Shared Namespace(s)

rename          = "RENAME" SP mailbox SP mailbox
                     [rename-params]
                     ;; Use of INBOX as a destination gives
                     ;; a NO error, unless rename-params
                     ;; is not empty.

rename-params     = SP "(" rename-param *( SP rename-param) ")"

rename-param      = rename-param-name [SP rename-param-value]

rename-param-name = tagged-ext-label

rename-param-value= tagged-ext-val
                     ;; This non-terminal shows recommended syntax
                     ;; for future extensions.


response-data   = "*" SP response-payload CRLF

response-payload= resp-cond-state / resp-cond-bye /
                     mailbox-data / message-data / capability-data

search          = "SEARCH" [search-return-opts]
                     SP search-program

search-correlator  = SP "(" "TAG" SP tag-string ")"
search-program     = ["CHARSET" SP charset SP]
                        search-key *(SP search-key)
                        ;; CHARSET argument to SEARCH MUST be
                        ;; registered with IANA.

search-return-data = search-modifier-name SP search-return-value
                        ;; Note that not every SEARCH return option
                        ;; is required to have the corresponding
                        ;; ESEARCH return data.

search-return-opts = SP "RETURN" SP "(" [search-return-opt
                        *(SP search-return-opt)] ")"

search-return-opt = search-modifier-name [SP search-mod-params]

search-return-value = tagged-ext-val
                        ;; Data for the returned search option.
                        ;; A single "nz-number"/"number" value
                        ;; can be returned as an atom (i.e., without
                        ;; quoting).  A sequence-set can be returned
                        ;; as an atom as well.

search-modifier-name = tagged-ext-label

search-mod-params = tagged-ext-val
                     ;; This non-terminal shows recommended syntax
                     ;; for future extensions.


select          = "SELECT" SP mailbox [select-params]
                     ;; modifies the original IMAP SELECT command to
                     ;; accept optional parameters

select-params   = SP "(" select-param *(SP select-param) ")"

select-param    = select-param-name [SP select-param-value]
                     ;; a parameter to SELECT may contain one or
                     ;; more atoms and/or strings and/or lists.

select-param-name= tagged-ext-label

select-param-value= tagged-ext-val
                     ;; This non-terminal shows recommended syntax
                     ;; for future extensions.


status-att-list = status-att-val *(SP status-att-val)
                     ;; Redefines status-att-list from RFC 3501.
                     ;; status-att-val is defined in RFC 3501 errata

status-att-val  = ("MESSAGES" SP number) /
                     ("RECENT" SP number) /
                     ("UIDNEXT" SP nz-number) /
                     ("UIDVALIDITY" SP nz-number) /
                     ("UNSEEN" SP number)
                     ;; Extensions to the STATUS responses
                     ;; should extend this production.
                     ;; Extensions should use the generic
                     ;; syntax defined by tagged-ext.

store           = "STORE" SP sequence-set [store-modifiers]
                     SP store-att-flags
                     ;; extend [IMAP4] STORE command syntax
                     ;; to allow for optional store-modifiers

store-modifiers =  SP "(" store-modifier *(SP store-modifier)
                       ")"

store-modifier  = store-modifier-name [SP store-modif-params]

store-modif-params = tagged-ext-val
                     ;; This non-terminal shows recommended syntax
                     ;; for future extensions.

store-modifier-name = tagged-ext-label

tag-string         = string
                        ;; tag of the command that caused
                        ;; the ESEARCH response, sent as
                        ;; a string.

tagged-ext          = tagged-ext-label SP tagged-ext-val
                          ;; recommended overarching syntax for
                          ;; extensions

tagged-ext-label    = tagged-label-fchar *tagged-label-char
                         ;; Is a valid RFC 3501 "atom".

tagged-label-fchar  = ALPHA / "-" / "_" / "."

tagged-label-char   = tagged-label-fchar / DIGIT / ":"
tagged-ext-comp     = astring /
                         tagged-ext-comp *(SP tagged-ext-comp) /
                         "(" tagged-ext-comp ")"
                          ;; Extensions that follow this general
                          ;; syntax should use nstring instead of
                          ;; astring when appropriate in the context
                          ;; of the extension.
                          ;; Note that a message set or a "number"
                          ;; can always be represented as an "atom".
                          ;; An URL should be represented as
                          ;; a "quoted" string.

tagged-ext-simple   = sequence-set / number

tagged-ext-val      = tagged-ext-simple /
                         "(" [tagged-ext-comp] ")"