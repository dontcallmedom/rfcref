absolute-URI = scheme ":" hier-part ["?" query]
authority = [userinfo "@"] URI-HOST [":" port]
dec-octet = DIGIT / %x31-39 DIGIT / "1" 2DIGIT / "2" %x30-34 DIGIT / "25" %x30-35
fragment = *(pchar / "/" / "?")
h16 = 1*4HEXDIG
hier-part = "//" authority path-abempty / path-absolute / path-rootless / path-empty
IP-literal = "[" (IPv6address / IPvFuture) "]"
IPv4address = dec-octet "." dec-octet "." dec-octet "." dec-octet
IPv6address = 6(h16 ":") ls32 / "::" 5(h16 ":") ls32 / [h16] "::" 4(h16 ":") ls32 / [[(h16 ":")] h16] "::" 3(h16 ":") ls32 / [*2(h16 ":") h16] "::" 2(h16 ":") ls32 / [*3(h16 ":") h16] "::" h16 ":" ls32 / [*4(h16 ":") h16] "::" ls32 / [*5(h16 ":") h16] "::" h16 / [*6(h16 ":") h16] "::"
IPvFuture = "v" 1*HEXDIG "." 1*(unreserved / sub-delims / ":")
ls32 = (h16 ":" h16) / IPv4address
path-abempty = *("/" segment)
path-absolute = "/" [segment-nz *("/" segment)]
path-empty = 0<pchar>
path-noscheme = segment-nz-nc *("/" segment)
path-rootless = segment-nz *("/" segment)
pchar = unreserved / pct-encoded / sub-delims / ":" / "@"
pct-encoded = "%" HEXDIG HEXDIG
port = *DIGIT
query = *(pchar / "/" / "?")
reg-name = *(unreserved / pct-encoded / sub-delims)
relative-part = "//" authority path-abempty / path-absolute / path-noscheme / path-empty
relative-ref = relative-part ["?" query] ["#" fragment]
scheme = ALPHA *(ALPHA / DIGIT / "+" / "-" / ".")
segment = *pchar
segment-nz = 1*pchar
segment-nz-nc = 1*(unreserved / pct-encoded / sub-delims / "@")
sub-delims = "!" / "$" / "&" / "'" / "(" / ")" / "*" / "+" / "," / ";" / "="
unreserved = ALPHA / DIGIT / "-" / "." / "_" / "~"
URI = scheme ":" hier-part ["?" query] ["#" fragment]
URI-reference = URI / relative-ref
userinfo = *(unreserved / pct-encoded / sub-delims / ":")
URI-HOST = IP-literal / IPv4address / reg-name
absolute-form = absolute-URI
absolute-path = 1*("/" segment)
asterisk-form = "*"
authority-form = authority
BWS = OWS
chunk = chunk-size [chunk-ext] CRLF chunk-data CRLF
chunk-data = 1*OCTET
chunk-ext = *(";" chunk-ext-name ["=" chunk-ext-val])
chunk-ext-name = token
chunk-ext-val = token / quoted-string
chunk-size = 1*HEXDIG
chunked-body = *chunk last-chunk trailer-part CRLF
comment = "(" *(ctext / quoted-pair / comment) ")"
Connection = *("," OWS) connection-option *(OWS "," [OWS connection-option])
connection-option = token
Content-Length = 1*DIGIT
ctext = HTAB / SP / %x21-27 / %x2a-5b / %x5d-7e / obs-text
field-content = field-vchar [1*(SP / HTAB) field-vchar]
field-name = token
field-value = *(field-content / obs-fold)
field-vchar = VCHAR / obs-text
header-field = field-name ":" OWS field-value OWS
Host = uri-host [":" port]
HTTP-message = start-line *(header-field CRLF) CRLF [message-body]
HTTP-name = %x48
http-URI = "http://" authority path-abempty ["?" query] ["#" fragment]
HTTP-version = HTTP-name "/" DIGIT "." DIGIT
https-URI = "https://" authority path-abempty ["?" query] ["#" fragment]
last-chunk = 1*"0" [chunk-ext] CRLF
message-body = *OCTET
method = token
obs-fold = CRLF 1*(SP / HTAB)
obs-text = %x80-ff
origin-form = absolute-path ["?" query]
OWS = *(SP / HTAB)
partial-URI = relative-part ["?" query]
protocol = protocol-name ["/" protocol-version]
protocol-name = token
protocol-version = token
pseudonym = token
qdtext = HTAB / SP / "!" / %x23-5b / %x5d-7e / obs-text
quoted-pair = "\" (HTAB / SP / VCHAR / obs-text)
quoted-string = DQUOTE *(qdtext / quoted-pair) DQUOTE
rank = ("0" ["." *3DIGIT]) / ("1" ["." *3"0"])
reason-phrase = *(HTAB / SP / VCHAR / obs-text)
received-by = (uri-host [":" port]) / pseudonym
received-protocol = [protocol-name "/"] protocol-version
request-line = method SP request-target SP HTTP-version CRLF
request-target = origin-form / absolute-form / authority-form / asterisk-form
RWS = 1*(SP / HTAB)
start-line = request-line / status-line
status-code = 3DIGIT
status-line = HTTP-version SP status-code SP reason-phrase CRLF
t-codings = "trailers" / (transfer-coding [t-ranking])
t-ranking = OWS ";" OWS "q=" rank
tchar = "!" / "#" / "$" / "%" / "&" / "'" / "*" / "+" / "-" / "." / "^" / "_" / "`" / "|" / "~" / DIGIT / ALPHA
TE = [("," / t-codings) *(OWS "," [OWS t-codings])]
token = 1*tchar
Trailer = *("," OWS) field-name *(OWS "," [OWS field-name])
trailer-part = *(header-field CRLF)
transfer-coding = "chunked" / "compress" / "deflate" / "gzip" / transfer-extension
Transfer-Encoding = *("," OWS) transfer-coding *(OWS "," [OWS transfer-coding])
transfer-extension = token *(OWS ";" OWS transfer-parameter)
transfer-parameter = token BWS "=" BWS (token / quoted-string)
Upgrade = *("," OWS) protocol *(OWS "," [OWS protocol])
Via = *("," OWS) (received-protocol RWS received-by [RWS comment]) *(OWS "," [OWS (received-protocol RWS received-by [RWS comment])])