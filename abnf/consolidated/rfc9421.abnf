absolute-URI = scheme ":" hier-part ["?" query]
authority = [userinfo "@"] URI-HOST [":" port]
dec-octet = DIGIT / %x31-39 DIGIT / "1" 2DIGIT / "2" %x30-34 DIGIT / "25" %x30-35
fragment = *(pchar / "/" / "?")
h16 = 1*4HEXDIG
hier-part = "//" authority path-abempty / path-absolute / path-rootless / path-empty
IP-literal = "[" (IPv6address / IPvFuture) "]"
IPv4address = dec-octet "." dec-octet "." dec-octet "." dec-octet
IPv6address = 6(h16 ":") ls32 / "::" 5(h16 ":") ls32 / [h16] "::" 4(h16 ":") ls32 / [[(h16 ":")] h16] "::" 3(h16 ":") ls32 / [*2(h16 ":") h16] "::" 2(h16 ":") ls32 / [*3(h16 ":") h16] "::" h16 ":" ls32 / [*4(h16 ":") h16] "::" ls32 / [*5(h16 ":") h16] "::" h16 / [*6(h16 ":") h16] "::"
IPvFuture = "v" 1*HEXDIG "." 1*(unreserved / sub-delims / ":")
ls32 = (h16 ":" h16) / IPv4address
path-abempty = *("/" segment)
path-absolute = "/" [segment-nz *("/" segment)]
path-empty = 0<pchar>
path-noscheme = segment-nz-nc *("/" segment)
path-rootless = segment-nz *("/" segment)
pchar = unreserved / pct-encoded / sub-delims / ":" / "@"
pct-encoded = "%" HEXDIG HEXDIG
port = *DIGIT
query = *(pchar / "/" / "?")
reg-name = *(unreserved / pct-encoded / sub-delims)
relative-part = "//" authority path-abempty / path-absolute / path-noscheme / path-empty
relative-ref = relative-part ["?" query] ["#" fragment]
scheme = ALPHA *(ALPHA / DIGIT / "+" / "-" / ".")
segment = *pchar
segment-nz = 1*pchar
segment-nz-nc = 1*(unreserved / pct-encoded / sub-delims / "@")
sub-delims = "!" / "$" / "&" / "'" / "(" / ")" / "*" / "+" / "," / ";" / "="
unreserved = ALPHA / DIGIT / "-" / "." / "_" / "~"
URI = scheme ":" hier-part ["?" query] ["#" fragment]
URI-reference = URI / relative-ref
userinfo = *(unreserved / pct-encoded / sub-delims / ":")
URI-HOST = IP-literal / IPv4address / reg-name
language-range = (1*8ALPHA *("-" 1*8rfc4647-ALPHANUM)) / "*"
rfc4647-ALPHANUM = ALPHA / DIGIT
alphanum = (ALPHA / DIGIT)
extension = singleton 1*("-" (2*8alphanum))
extlang = 3ALPHA *2("-" 3ALPHA)
grandfathered = irregular / regular
irregular = "en-GB-oed" / "i-ami" / "i-bnn" / "i-default" / "i-enochian" / "i-hak" / "i-klingon" / "i-lux" / "i-mingo" / "i-navajo" / "i-pwn" / "i-tao" / "i-tay" / "i-tsu" / "sgn-BE-FR" / "sgn-BE-NL" / "sgn-CH-DE"
langtag = language ["-" script] ["-" region] *("-" variant) *("-" extension) ["-" privateuse]
language = 2*3ALPHA ["-" extlang] / 4ALPHA / 5*8ALPHA
Language-Tag = langtag / privateuse / grandfathered
privateuse = "x" 1*("-" (1*8alphanum))
region = 2ALPHA / 3DIGIT
regular = "art-lojban" / "cel-gaulish" / "no-bok" / "no-nyn" / "zh-guoyu" / "zh-hakka" / "zh-min" / "zh-min-nan" / "zh-xiang"
script = 4ALPHA
singleton = DIGIT / %x41-57 / %x59-5a / %x61-77 / %x79-7a
variant = 5*8alphanum / (DIGIT 3alphanum)
addr-spec = local-part "@" domain
angle-addr = [CFWS] "<" addr-spec ">" [CFWS] / obs-angle-addr
atext = ALPHA / DIGIT / "!" / "#" / "$" / "%" / "&" / "'" / "*" / "+" / "-" / "/" / "=" / "?" / "^" / "_" / "`" / "{" / "|" / "}" / "~"
atom = [CFWS] 1*atext [CFWS]
ccontent = ctext / quoted-pair / comment
CFWS = (1*([FWS] comment) [FWS]) / FWS
comment = "(" *([FWS] ccontent) [FWS] ")"
ctext = %d33-39 / %d42-91 / %d93-126 / obs-ctext
display-name = phrase
domain = dot-atom / domain-literal / obs-domain
domain-literal = [CFWS] "[" *([FWS] dtext) [FWS] "]" [CFWS]
dot-atom = [CFWS] dot-atom-text [CFWS]
dot-atom-text = 1*atext *("." 1*atext)
dtext = %d33-90 / %d94-126 / obs-dtext
FWS = ([*WSP CRLF] 1*WSP) / obs-FWS
local-part = dot-atom / quoted-string / obs-local-part
mailbox = name-addr / addr-spec
name-addr = [display-name] angle-addr
obs-angle-addr = [CFWS] "<" obs-route addr-spec ">" [CFWS]
obs-ctext = obs-NO-WS-CTL
obs-domain = atom *("." atom)
obs-domain-list = *(CFWS / ",") "@" domain *("," [CFWS] ["@" domain])
obs-dtext = obs-NO-WS-CTL / quoted-pair
obs-FWS = 1*WSP *(CRLF 1*WSP)
obs-local-part = word *("." word)
obs-NO-WS-CTL = %d1-8 / %d11 / %d12 / %d14-31 / %d127
obs-phrase = word *(word / "." / CFWS)
obs-qp = "\" (%d0 / obs-NO-WS-CTL / LF / CR)
obs-qtext = obs-NO-WS-CTL
obs-route = obs-domain-list ":"
phrase = 1*word / obs-phrase
qcontent = qtext / quoted-pair
qtext = %d33 / %d35-91 / %d93-126 / obs-qtext
quoted-pair = ("\" (VCHAR / WSP)) / obs-qp
quoted-string = [CFWS] DQUOTE *([FWS] qcontent) [FWS] DQUOTE [CFWS]
word = atom / quoted-string
field-content = field-vchar [1*(SP / HTAB / field-vchar) field-vchar]
field-vchar = VCHAR / obs-text
obs-text = %x80-ff
OWS = *(SP / HTAB)
tchar = "!" / "#" / "$" / "%" / "&" / "'" / "*" / "+" / "-" / "." / "^" / "_" / "`" / "|" / "~" / DIGIT / ALPHA
bare-item = sf-integer / sf-decimal / sf-string / sf-token / sf-binary / sf-boolean
base64 = ALPHA / DIGIT / "+" / "/" / "="
boolean = "0" / "1"
chr = unescaped / escaped
escaped = "\" (DQUOTE / "\")
inner-list = "(" *SP [sf-item *(1*SP sf-item) *SP] ")" parameters
key = (lcalpha / "*") *(lcalpha / DIGIT / "_" / "-" / "." / "*")
lcalpha = %x61-7a
param-key = key
param-value = bare-item
parameter = param-key ["=" param-value]
parameters = *(";" *SP parameter)
sf-binary = ":" *(base64) ":"
sf-boolean = "?" boolean
sf-decimal = ["-"] 1*12DIGIT "." 1*3DIGIT
sf-integer = ["-"] 1*15DIGIT
sf-item = bare-item parameters
sf-string = DQUOTE *chr DQUOTE
sf-token = (ALPHA / "*") *(tchar / ":" / "/")
unescaped = %x20-21 / %x23-5b / %x5d-7e
component-identifier = component-name parameters
component-name = sf-string
derived-component-value = *(VCHAR / SP)
signature-base = *(signature-base-line LF) signature-params-line
signature-base-line = component-identifier ":" SP (derived-component-value / *field-content)
signature-params-line = DQUOTE "@signature-params" DQUOTE ":" SP inner-list