absolute-URI = scheme ":" hier-part ["?" query]
authority = [userinfo "@"] URI-HOST [":" port]
dec-octet = DIGIT / %x31-39 DIGIT / "1" 2DIGIT / "2" %x30-34 DIGIT / "25" %x30-35
fragment = *(pchar / "/" / "?")
h16 = 1*4HEXDIG
hier-part = "//" authority path-abempty / path-absolute / path-rootless / path-empty
IP-literal = "[" (IPv6address / IPvFuture) "]"
IPv4address = dec-octet "." dec-octet "." dec-octet "." dec-octet
IPv6address = 6(h16 ":") ls32 / "::" 5(h16 ":") ls32 / [h16] "::" 4(h16 ":") ls32 / [[(h16 ":")] h16] "::" 3(h16 ":") ls32 / [*2(h16 ":") h16] "::" 2(h16 ":") ls32 / [*3(h16 ":") h16] "::" h16 ":" ls32 / [*4(h16 ":") h16] "::" ls32 / [*5(h16 ":") h16] "::" h16 / [*6(h16 ":") h16] "::"
IPvFuture = "v" 1*HEXDIG "." 1*(unreserved / sub-delims / ":")
ls32 = (h16 ":" h16) / IPv4address
path-abempty = *("/" segment)
path-absolute = "/" [segment-nz *("/" segment)]
path-empty = 0<pchar>
path-noscheme = segment-nz-nc *("/" segment)
path-rootless = segment-nz *("/" segment)
pchar = unreserved / pct-encoded / sub-delims / ":" / "@"
pct-encoded = "%" HEXDIG HEXDIG
port = *DIGIT
query = *(pchar / "/" / "?")
reg-name = *(unreserved / pct-encoded / sub-delims)
relative-part = "//" authority path-abempty / path-absolute / path-noscheme / path-empty
relative-ref = relative-part ["?" query] ["#" fragment]
scheme = ALPHA *(ALPHA / DIGIT / "+" / "-" / ".")
segment = *pchar
segment-nz = 1*pchar
segment-nz-nc = 1*(unreserved / pct-encoded / sub-delims / "@")
sub-delims = "!" / "$" / "&" / "'" / "(" / ")" / "*" / "+" / "," / ";" / "="
unreserved = ALPHA / DIGIT / "-" / "." / "_" / "~"
URI = scheme ":" hier-part ["?" query] ["#" fragment]
URI-reference = URI / relative-ref
userinfo = *(unreserved / pct-encoded / sub-delims / ":")
URI-HOST = IP-literal / IPv4address / reg-name
language-range = (1*8ALPHA *("-" 1*8rfc4647-ALPHANUM)) / "*"
rfc4647-ALPHANUM = ALPHA / DIGIT
alphanum = (ALPHA / DIGIT)
extension = singleton 1*("-" (2*8alphanum))
extlang = 3ALPHA *2("-" 3ALPHA)
grandfathered = irregular / regular
irregular = "en-GB-oed" / "i-ami" / "i-bnn" / "i-default" / "i-enochian" / "i-hak" / "i-klingon" / "i-lux" / "i-mingo" / "i-navajo" / "i-pwn" / "i-tao" / "i-tay" / "i-tsu" / "sgn-BE-FR" / "sgn-BE-NL" / "sgn-CH-DE"
langtag = language ["-" script] ["-" region] *("-" variant) *("-" extension) ["-" privateuse]
language = 2*3ALPHA ["-" extlang] / 4ALPHA / 5*8ALPHA
Language-Tag = langtag / privateuse / grandfathered
privateuse = "x" 1*("-" (1*8alphanum))
region = 2ALPHA / 3DIGIT
regular = "art-lojban" / "cel-gaulish" / "no-bok" / "no-nyn" / "zh-guoyu" / "zh-hakka" / "zh-min" / "zh-min-nan" / "zh-xiang"
script = 4ALPHA
singleton = DIGIT / %x41-57 / %x59-5a / %x61-77 / %x79-7a
variant = 5*8alphanum / (DIGIT 3alphanum)
addr-spec = local-part "@" domain
angle-addr = [CFWS] "<" addr-spec ">" [CFWS] / obs-angle-addr
atext = ALPHA / DIGIT / "!" / "#" / "$" / "%" / "&" / "'" / "*" / "+" / "-" / "/" / "=" / "?" / "^" / "_" / "`" / "{" / "|" / "}" / "~"
atom = [CFWS] 1*atext [CFWS]
ccontent = rfc5322-CTEXT / rfc5322-QUOTED-PAIR / rfc5322-COMMENT
CFWS = (1*([FWS] rfc5322-COMMENT) [FWS]) / FWS
display-name = phrase
domain = dot-atom / domain-literal / obs-domain
domain-literal = [CFWS] "[" *([FWS] dtext) [FWS] "]" [CFWS]
dot-atom = [CFWS] dot-atom-text [CFWS]
dot-atom-text = 1*atext *("." 1*atext)
dtext = %d33-90 / %d94-126 / obs-dtext
FWS = ([*WSP CRLF] 1*WSP) / obs-FWS
local-part = dot-atom / rfc5322-QUOTED-STRING / obs-local-part
mailbox = name-addr / addr-spec
name-addr = [display-name] angle-addr
obs-angle-addr = [CFWS] "<" obs-route addr-spec ">" [CFWS]
obs-ctext = obs-NO-WS-CTL
obs-domain = atom *("." atom)
obs-domain-list = *(CFWS / ",") "@" domain *("," [CFWS] ["@" domain])
obs-dtext = obs-NO-WS-CTL / rfc5322-QUOTED-PAIR
obs-FWS = 1*WSP *(CRLF 1*WSP)
obs-local-part = word *("." word)
obs-NO-WS-CTL = %d1-8 / %d11 / %d12 / %d14-31 / %d127
obs-phrase = word *(word / "." / CFWS)
obs-qp = "\" (%d0 / obs-NO-WS-CTL / LF / CR)
obs-qtext = obs-NO-WS-CTL
obs-route = obs-domain-list ":"
phrase = 1*word / obs-phrase
qcontent = qtext / rfc5322-QUOTED-PAIR
qtext = %d33 / %d35-91 / %d93-126 / obs-qtext
word = atom / rfc5322-QUOTED-STRING
rfc5322-COMMENT = "(" *([FWS] ccontent) [FWS] ")"
rfc5322-CTEXT = %d33-39 / %d42-91 / %d93-126 / obs-ctext
rfc5322-QUOTED-PAIR = ("\" (VCHAR / WSP)) / obs-qp
rfc5322-QUOTED-STRING = [CFWS] DQUOTE *([FWS] qcontent) [FWS] DQUOTE [CFWS]
absolute-path = 1*("/" segment)
Accept = [(media-range [weight]) *(OWS "," OWS (media-range [weight]))]
Accept-Charset = [((token / "*") [weight]) *(OWS "," OWS ((token / "*") [weight]))]
Accept-Encoding = [(codings [weight]) *(OWS "," OWS (codings [weight]))]
Accept-Language = [(language-range [weight]) *(OWS "," OWS (language-range [weight]))]
Accept-Ranges = acceptable-ranges
acceptable-ranges = range-unit *(OWS "," OWS range-unit)
Allow = [method *(OWS "," OWS method)]
asctime-date = day-name SP date3 SP time-of-day SP year
auth-param = token BWS "=" BWS (token / quoted-string)
auth-scheme = token
Authentication-Info = [auth-param *(OWS "," OWS auth-param)]
Authorization = credentials
BWS = OWS
challenge = auth-scheme [1*SP (token68 / [auth-param *(OWS "," OWS auth-param)])]
codings = content-coding / "identity" / "*"
comment = "(" *(ctext / quoted-pair / comment) ")"
complete-length = 1*DIGIT
Connection = [connection-option *(OWS "," OWS connection-option)]
connection-option = token
content-coding = token
Content-Encoding = [content-coding *(OWS "," OWS content-coding)]
Content-Language = [language-tag *(OWS "," OWS language-tag)]
Content-Length = 1*DIGIT
Content-Location = absolute-URI / partial-URI
Content-Range = range-unit SP (range-resp / unsatisfied-range)
Content-Type = media-type
credentials = auth-scheme [1*SP (token68 / [auth-param *(OWS "," OWS auth-param)])]
ctext = HTAB / SP / %x21-27 / %x2a-5b / %x5d-7e / obs-text
Date = HTTP-date
date1 = day SP month SP year
date2 = day "-" month "-" 2DIGIT
date3 = month SP (2DIGIT / (SP DIGIT))
day = 2DIGIT
day-name = %x4d / %x54 / %x57 / %x54 / %x46 / %x53 / %x53
day-name-l = %x4d / %x54 / %x57 / %x54 / %x46 / %x53 / %x53
delay-seconds = 1*DIGIT
entity-tag = [weak] opaque-tag
ETag = entity-tag
etagc = "!" / %x23-7e / obs-text
Expect = [expectation *(OWS "," OWS expectation)]
expectation = token ["=" (token / quoted-string) parameters]
field-content = field-vchar [1*(SP / HTAB / field-vchar) field-vchar]
field-name = token
field-value = *field-content
field-vchar = VCHAR / obs-text
first-pos = 1*DIGIT
From = mailbox
GMT = %x47
Host = uri-host [":" port]
hour = 2DIGIT
HTTP-date = IMF-fixdate / obs-date
http-URI = "http://" authority path-abempty ["?" query]
https-URI = "https://" authority path-abempty ["?" query]
If-Match = "*" / [entity-tag *(OWS "," OWS entity-tag)]
If-Modified-Since = HTTP-date
If-None-Match = "*" / [entity-tag *(OWS "," OWS entity-tag)]
If-Range = entity-tag / HTTP-date
If-Unmodified-Since = HTTP-date
IMF-fixdate = day-name "," SP date1 SP time-of-day SP GMT
incl-range = first-pos "-" last-pos
int-range = first-pos "-" [last-pos]
Last-Modified = HTTP-date
last-pos = 1*DIGIT
Location = URI-reference
Max-Forwards = 1*DIGIT
media-range = ("*/*" / (type "/*") / (type "/" subtype)) parameters
media-type = type "/" subtype parameters
method = token
minute = 2DIGIT
month = %x4a / %x46 / %x4d / %x41 / %x4d / %x4a / %x4a / %x41 / %x53 / %x4f / %x4e / %x44
obs-date = rfc850-date / asctime-date
obs-text = %x80-ff
opaque-tag = DQUOTE *etagc DQUOTE
other-range = 1*(%x21-2b / %x2d-7e)
OWS = *(SP / HTAB)
parameter = parameter-name "=" parameter-value
parameter-name = token
parameter-value = (token / quoted-string)
parameters = *(OWS ";" OWS [parameter])
partial-URI = relative-part ["?" query]
product = token ["/" product-version]
product-version = token
protocol = protocol-name ["/" protocol-version]
protocol-name = token
protocol-version = token
Proxy-Authenticate = [challenge *(OWS "," OWS challenge)]
Proxy-Authentication-Info = [auth-param *(OWS "," OWS auth-param)]
Proxy-Authorization = credentials
pseudonym = token
qdtext = HTAB / SP / "!" / %x23-5b / %x5d-7e / obs-text
quoted-pair = "\" (HTAB / SP / VCHAR / obs-text)
quoted-string = DQUOTE *(qdtext / quoted-pair) DQUOTE
qvalue = ("0" ["." *3DIGIT]) / ("1" ["." *3"0"])
Range = ranges-specifier
range-resp = incl-range "/" (complete-length / "*")
range-set = range-spec *(OWS "," OWS range-spec)
range-spec = int-range / suffix-range / other-range
range-unit = token
ranges-specifier = range-unit "=" range-set
received-by = pseudonym [":" port]
received-protocol = [protocol-name "/"] protocol-version
Referer = absolute-URI / partial-URI
Retry-After = HTTP-date / delay-seconds
rfc850-date = day-name-l "," SP date2 SP time-of-day SP GMT
RWS = 1*(SP / HTAB)
second = 2DIGIT
Server = product *(RWS (product / comment))
subtype = token
suffix-length = 1*DIGIT
suffix-range = "-" suffix-length
t-codings = "trailers" / (transfer-coding [weight])
tchar = "!" / "#" / "$" / "%" / "&" / "'" / "*" / "+" / "-" / "." / "^" / "_" / "`" / "|" / "~" / DIGIT / ALPHA
TE = [t-codings *(OWS "," OWS t-codings)]
time-of-day = hour ":" minute ":" second
token = 1*tchar
token68 = 1*(ALPHA / DIGIT / "-" / "." / "_" / "~" / "+" / "/") *"="
Trailer = [field-name *(OWS "," OWS field-name)]
transfer-coding = token *(OWS ";" OWS transfer-parameter)
transfer-parameter = token BWS "=" BWS (token / quoted-string)
type = token
unsatisfied-range = "*/" complete-length
Upgrade = [protocol *(OWS "," OWS protocol)]
User-Agent = product *(RWS (product / comment))
Vary = [("*" / field-name) *(OWS "," OWS ("*" / field-name))]
Via = [(received-protocol RWS received-by [RWS comment]) *(OWS "," OWS (received-protocol RWS received-by [RWS comment]))]
weak = %x57
weight = OWS ";" OWS "q=" qvalue
WWW-Authenticate = [challenge *(OWS "," OWS challenge)]
year = 4DIGIT