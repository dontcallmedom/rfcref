absolute-URI = scheme ":" hier-part ["?" query]
authority = [userinfo "@"] URI-HOST [":" port]
path-abempty = *("/" segment)
port = *DIGIT
query = *(pchar / "/" / "?")
relative-part = "//" authority path-abempty / path-absolute / path-noscheme / path-empty
segment = *pchar
URI-reference = URI / relative-ref
URI-HOST = IP-literal / IPv4address / reg-name
scheme = ALPHA *(ALPHA / DIGIT / "+" / "-" / ".")
hier-part = "//" authority path-abempty / path-absolute / path-rootless / path-empty
userinfo = *(unreserved / pct-encoded / sub-delims / ":")
pchar = unreserved / pct-encoded / sub-delims / ":" / "@"
path-absolute = "/" [segment-nz *("/" segment)]
path-noscheme = segment-nz-nc *("/" segment)
path-empty = 0<pchar>
URI = scheme ":" hier-part ["?" query] ["#" fragment]
relative-ref = relative-part ["?" query] ["#" fragment]
IP-literal = "[" (IPv6address / IPvFuture) "]"
IPv4address = dec-octet "." dec-octet "." dec-octet "." dec-octet
reg-name = *(unreserved / pct-encoded / sub-delims)
path-rootless = segment-nz *("/" segment)
unreserved = ALPHA / DIGIT / "-" / "." / "_" / "~"
pct-encoded = "%" HEXDIG HEXDIG
sub-delims = "!" / "$" / "&" / "'" / "(" / ")" / "*" / "+" / "," / ";" / "="
segment-nz = 1*pchar
segment-nz-nc = 1*(unreserved / pct-encoded / sub-delims / "@")
fragment = *(pchar / "/" / "?")
IPv6address = 6(h16 ":") ls32 / "::" 5(h16 ":") ls32 / [h16] "::" 4(h16 ":") ls32 / [[(h16 ":")] h16] "::" 3(h16 ":") ls32 / [*2(h16 ":") h16] "::" 2(h16 ":") ls32 / [*3(h16 ":") h16] "::" h16 ":" ls32 / [*4(h16 ":") h16] "::" ls32 / [*5(h16 ":") h16] "::" h16 / [*6(h16 ":") h16] "::"
IPvFuture = "v" 1*HEXDIG "." 1*(unreserved / sub-delims / ":")
dec-octet = DIGIT / %x31-39 DIGIT / "1" 2DIGIT / "2" %x30-34 DIGIT / "25" %x30-35
h16 = 1*4HEXDIG
ls32 = (h16 ":" h16) / IPv4address



language-range = (1*8ALPHA *("-" 1*8alphanum)) / "*"
alphanum = ALPHA / DIGIT

Language-Tag = langtag / privateuse / grandfathered
langtag = language ["-" script] ["-" region] *("-" variant) *("-" extension) ["-" privateuse]
privateuse = "x" 1*("-" (1*8rfc5646-ALPHANUM))
grandfathered = irregular / regular
language = 2*3ALPHA ["-" extlang] / 4ALPHA / 5*8ALPHA
script = 4ALPHA
region = 2ALPHA / 3DIGIT
variant = 5*8rfc5646-ALPHANUM / (DIGIT 3rfc5646-ALPHANUM)
extension = singleton 1*("-" (2*8rfc5646-ALPHANUM))
rfc5646-ALPHANUM = (ALPHA / DIGIT)
irregular = "en-GB-oed" / "i-ami" / "i-bnn" / "i-default" / "i-enochian" / "i-hak" / "i-klingon" / "i-lux" / "i-mingo" / "i-navajo" / "i-pwn" / "i-tao" / "i-tay" / "i-tsu" / "sgn-BE-FR" / "sgn-BE-NL" / "sgn-CH-DE"
regular = "art-lojban" / "cel-gaulish" / "no-bok" / "no-nyn" / "zh-guoyu" / "zh-hakka" / "zh-min" / "zh-min-nan" / "zh-xiang"
extlang = 3ALPHA *2("-" 3ALPHA)
singleton = DIGIT / %x41-57 / %x59-5a / %x61-77 / %x79-7a



mailbox = name-addr / addr-spec
name-addr = [display-name] angle-addr
addr-spec = local-part "@" domain
display-name = phrase
angle-addr = [CFWS] "<" addr-spec ">" [CFWS] / obs-angle-addr
local-part = dot-atom / rfc5322-QUOTED-STRING / obs-local-part
domain = dot-atom / domain-literal / obs-domain
phrase = 1*word / obs-phrase
CFWS = (1*([FWS] rfc5322-COMMENT) [FWS]) / FWS
obs-angle-addr = [CFWS] "<" obs-route addr-spec ">" [CFWS]
dot-atom = [CFWS] dot-atom-text [CFWS]
rfc5322-QUOTED-STRING = [CFWS] DQUOTE *([FWS] qcontent) [FWS] DQUOTE [CFWS]
obs-local-part = word *("." word)
domain-literal = [CFWS] "[" *([FWS] dtext) [FWS] "]" [CFWS]
obs-domain = atom *("." atom)
word = atom / rfc5322-QUOTED-STRING
obs-phrase = word *(word / "." / CFWS)
FWS = ([*WSP CRLF] 1*WSP) / obs-FWS
rfc5322-COMMENT = "(" *([FWS] ccontent) [FWS] ")"
obs-route = obs-domain-list ":"
dot-atom-text = 1*atext *("." 1*atext)
qcontent = qtext / rfc5322-QUOTED-PAIR
dtext = %d33-90 / %d94-126 / obs-dtext
atom = [CFWS] 1*atext [CFWS]
obs-FWS = 1*WSP *(CRLF 1*WSP)
ccontent = rfc5322-CTEXT / rfc5322-QUOTED-PAIR / rfc5322-COMMENT
obs-domain-list = *(CFWS / ",") "@" domain *("," [CFWS] ["@" domain])
atext = ALPHA / DIGIT / "!" / "#" / "$" / "%" / "&" / "'" / "*" / "+" / "-" / "/" / "=" / "?" / "^" / "_" / "`" / "{" / "|" / "}" / "~"
qtext = %d33 / %d35-91 / %d93-126 / obs-qtext
rfc5322-QUOTED-PAIR = ("\" (VCHAR / WSP)) / obs-qp
obs-dtext = obs-NO-WS-CTL / rfc5322-QUOTED-PAIR
rfc5322-CTEXT = %d33-39 / %d42-91 / %d93-126 / obs-ctext
obs-qtext = obs-NO-WS-CTL
obs-qp = "\" (%d0 / obs-NO-WS-CTL / LF / CR)
obs-NO-WS-CTL = %d1-8 / %d11 / %d12 / %d14-31 / %d127
obs-ctext = obs-NO-WS-CTL
; Extracted from IETF RFC 9110
; Copyright (c) IETF Trust and the persons identified as authors of the code. All rights reserved.
; Redistribution and use in source and binary forms, with or without modification, is permitted pursuant to, and subject to the license terms contained in, the Revised BSD License set forth in Section 4.c of the IETF Trust's Legal Provisions Relating to IETF Documents (https://trustee.ietf.org/license-info).
Accept = [ ( media-range [ weight ] ) *( OWS "," OWS ( media-range [
 weight ] ) ) ]
Accept-Charset = [ ( ( token / "*" ) [ weight ] ) *( OWS "," OWS ( (
 token / "*" ) [ weight ] ) ) ]
Accept-Encoding = [ ( codings [ weight ] ) *( OWS "," OWS ( codings [
 weight ] ) ) ]
Accept-Language = [ ( language-range [ weight ] ) *( OWS "," OWS (
 language-range [ weight ] ) ) ]
Accept-Ranges = acceptable-ranges
Allow = [ method *( OWS "," OWS method ) ]
Authentication-Info = [ auth-param *( OWS "," OWS auth-param ) ]
Authorization = credentials

BWS = OWS

Connection = [ connection-option *( OWS "," OWS connection-option )
 ]
Content-Encoding = [ content-coding *( OWS "," OWS content-coding )
 ]
Content-Language = [ language-tag *( OWS "," OWS language-tag ) ]
Content-Length = 1*DIGIT
Content-Location = absolute-URI / partial-URI
Content-Range = range-unit SP ( range-resp / unsatisfied-range )
Content-Type = media-type

Date = HTTP-date

ETag = entity-tag
Expect = [ expectation *( OWS "," OWS expectation ) ]

From = mailbox

GMT = %x47.4D.54 ; GMT

HTTP-date = IMF-fixdate / obs-date
Host = uri-host [ ":" port ]

IMF-fixdate = day-name "," SP date1 SP time-of-day SP GMT
If-Match = "*" / [ entity-tag *( OWS "," OWS entity-tag ) ]
If-Modified-Since = HTTP-date
If-None-Match = "*" / [ entity-tag *( OWS "," OWS entity-tag ) ]
If-Range = entity-tag / HTTP-date
If-Unmodified-Since = HTTP-date

Last-Modified = HTTP-date
Location = URI-reference

Max-Forwards = 1*DIGIT

OWS = *( SP / HTAB )

Proxy-Authenticate = [ challenge *( OWS "," OWS challenge ) ]
Proxy-Authentication-Info = [ auth-param *( OWS "," OWS auth-param )
 ]
Proxy-Authorization = credentials

RWS = 1*( SP / HTAB )
Range = ranges-specifier
Referer = absolute-URI / partial-URI
Retry-After = HTTP-date / delay-seconds

Server = product *( RWS ( product / comment ) )

TE = [ t-codings *( OWS "," OWS t-codings ) ]
Trailer = [ field-name *( OWS "," OWS field-name ) ]

Upgrade = [ protocol *( OWS "," OWS protocol ) ]
User-Agent = product *( RWS ( product / comment ) )

Vary = [ ( "*" / field-name ) *( OWS "," OWS ( "*" / field-name ) )
 ]
Via = [ ( received-protocol RWS received-by [ RWS comment ] ) *( OWS
 "," OWS ( received-protocol RWS received-by [ RWS comment ] ) ) ]

WWW-Authenticate = [ challenge *( OWS "," OWS challenge ) ]

absolute-path = 1*( "/" segment )
acceptable-ranges = range-unit *( OWS "," OWS range-unit )
asctime-date = day-name SP date3 SP time-of-day SP year
auth-param = token BWS "=" BWS ( token / quoted-string )
auth-scheme = token

challenge = auth-scheme [ 1*SP ( token68 / [ auth-param *( OWS ","
 OWS auth-param ) ] ) ]
codings = content-coding / "identity" / "*"
comment = "(" *( ctext / quoted-pair / comment ) ")"
complete-length = 1*DIGIT
connection-option = token
content-coding = token
credentials = auth-scheme [ 1*SP ( token68 / [ auth-param *( OWS ","
 OWS auth-param ) ] ) ]
ctext = HTAB / SP / %x21-27 ; '!'-'''
 / %x2A-5B ; '*'-'['
 / %x5D-7E ; ']'-'~'
 / obs-text

date1 = day SP month SP year
date2 = day "-" month "-" 2DIGIT
date3 = month SP ( 2DIGIT / ( SP DIGIT ) )
day = 2DIGIT
day-name = %x4D.6F.6E ; Mon
 / %x54.75.65 ; Tue
 / %x57.65.64 ; Wed
 / %x54.68.75 ; Thu
 / %x46.72.69 ; Fri
 / %x53.61.74 ; Sat
 / %x53.75.6E ; Sun
day-name-l = %x4D.6F.6E.64.61.79 ; Monday
 / %x54.75.65.73.64.61.79 ; Tuesday
 / %x57.65.64.6E.65.73.64.61.79 ; Wednesday
 / %x54.68.75.72.73.64.61.79 ; Thursday
 / %x46.72.69.64.61.79 ; Friday
 / %x53.61.74.75.72.64.61.79 ; Saturday
 / %x53.75.6E.64.61.79 ; Sunday
delay-seconds = 1*DIGIT

entity-tag = [ weak ] opaque-tag
etagc = "!" / %x23-7E ; '#'-'~'
 / obs-text
expectation = token [ "=" ( token / quoted-string ) parameters ]

field-content = field-vchar [ 1*( SP / HTAB / field-vchar )
 field-vchar ]
field-name = token
field-value = *field-content
field-vchar = VCHAR / obs-text
first-pos = 1*DIGIT

hour = 2DIGIT
http-URI = "http://" authority path-abempty [ "?" query ]
https-URI = "https://" authority path-abempty [ "?" query ]

incl-range = first-pos "-" last-pos
int-range = first-pos "-" [ last-pos ]

last-pos = 1*DIGIT

media-range = ( "*/*" / ( type "/*" ) / ( type "/" subtype ) )
 parameters
media-type = type "/" subtype parameters
method = token
minute = 2DIGIT
month = %x4A.61.6E ; Jan
 / %x46.65.62 ; Feb
 / %x4D.61.72 ; Mar
 / %x41.70.72 ; Apr
 / %x4D.61.79 ; May
 / %x4A.75.6E ; Jun
 / %x4A.75.6C ; Jul
 / %x41.75.67 ; Aug
 / %x53.65.70 ; Sep
 / %x4F.63.74 ; Oct
 / %x4E.6F.76 ; Nov
 / %x44.65.63 ; Dec

obs-date = rfc850-date / asctime-date
obs-text = %x80-FF
opaque-tag = DQUOTE *etagc DQUOTE
other-range = 1*( %x21-2B ; '!'-'+'
 / %x2D-7E ; '-'-'~'
 )

parameter = parameter-name "=" parameter-value
parameter-name = token
parameter-value = ( token / quoted-string )
parameters = *( OWS ";" OWS [ parameter ] )
partial-URI = relative-part [ "?" query ]
product = token [ "/" product-version ]
product-version = token
protocol = protocol-name [ "/" protocol-version ]
protocol-name = token
protocol-version = token
pseudonym = token

qdtext = HTAB / SP / "!" / %x23-5B ; '#'-'['
 / %x5D-7E ; ']'-'~'
 / obs-text
quoted-pair = "\" ( HTAB / SP / VCHAR / obs-text )
quoted-string = DQUOTE *( qdtext / quoted-pair ) DQUOTE
qvalue = ( "0" [ "." *3DIGIT ] ) / ( "1" [ "." *3"0" ] )

range-resp = incl-range "/" ( complete-length / "*" )
range-set = range-spec *( OWS "," OWS range-spec )
range-spec = int-range / suffix-range / other-range
range-unit = token
ranges-specifier = range-unit "=" range-set
received-by = pseudonym [ ":" port ]
received-protocol = [ protocol-name "/" ] protocol-version
rfc850-date = day-name-l "," SP date2 SP time-of-day SP GMT

second = 2DIGIT
subtype = token
suffix-length = 1*DIGIT
suffix-range = "-" suffix-length

t-codings = "trailers" / ( transfer-coding [ weight ] )
tchar = "!" / "#" / "$" / "%" / "&" / "'" / "*" / "+" / "-" / "." /
 "^" / "_" / "`" / "|" / "~" / DIGIT / ALPHA
time-of-day = hour ":" minute ":" second
token = 1*tchar
token68 = 1*( ALPHA / DIGIT / "-" / "." / "_" / "~" / "+" / "/" )
 *"="
transfer-coding = token *( OWS ";" OWS transfer-parameter )
transfer-parameter = token BWS "=" BWS ( token / quoted-string )
type = token

unsatisfied-range = "*/" complete-length

weak = %x57.2F ; W/
weight = OWS ";" OWS "q=" qvalue

year = 4DIGIT